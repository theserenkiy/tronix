Toms AVR macro assembler version 1.17 (Apr  3 2001)
Copyright (C) 2000 - Tom Mortensen
E-mail: tom@tavrasm.org  WWW: http://www.tavrasm.org

+------------------+-----------------------------------------------------------+
| Value            | Text                                                      |
|------------------|-----------------------------------------------------------|
|                  | .include "C:\avr\includes\m48def.inc"
|                  | ;***** THIS IS A MACHINE GENERATED FILE - DO NOT EDIT ********************
|                  | ;***** Created: 2005-01-11 10:31 ******* Source: ATmega48.xml ************
|                  | ;*************************************************************************
|                  | ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
|                  | ;* 
|                  | ;* Number            : AVR000
|                  | ;* File Name         : "m48def.inc"
|                  | ;* Title             : Register/Bit Definitions for the ATmega48
|                  | ;* Date              : 2005-01-11
|                  | ;* Version           : 2.14
|                  | ;* Support E-mail    : avr@atmel.com
|                  | ;* Target MCU        : ATmega48
|                  | ;* 
|                  | ;* DESCRIPTION
|                  | ;* When including this file in the assembly program file, all I/O register 
|                  | ;* names and I/O register bit names appearing in the data book can be used.
|                  | ;* In addition, the six registers forming the three data pointers X, Y and 
|                  | ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
|                  | ;* SRAM is also defined 
|                  | ;* 
|                  | ;* The Register names are represented by their hexadecimal address.
|                  | ;* 
|                  | ;* The Register Bit names are represented by their bit number (0-7).
|                  | ;* 
|                  | ;* Please observe the difference in using the bit names with instructions
|                  | ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
|                  | ;* (skip if bit in register set/cleared). The following example illustrates
|                  | ;* this:
|                  | ;* 
|                  | ;* in    r16,PORTB             ;read PORTB latch
|                  | ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
|                  | ;* out   PORTB,r16             ;output to PORTB
|                  | ;* 
|                  | ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
|                  | ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
|                  | ;* rjmp  TOV0_is_set           ;jump if set
|                  | ;* ...                         ;otherwise do something else
|                  | ;*************************************************************************
|                  | 
|                  | #ifndef _M48DEF_INC_
|                  | #define _M48DEF_INC_
|                  | 
|                  | 
|                  | #pragma partinc 0
|                  | 
|                  | ; ***** SPECIFY DEVICE ***************************************************
C:\avr\includes\m48def.inc:47: Warning : Unknown device 'ATmega48'
|                  | .device ATmega48
|                  | #pragma AVRPART ADMIN PART_NAME ATmega48
|                  | .equ    SIGNATURE_000   = 0x1e
|                  | .equ    SIGNATURE_001   = 0x92
|                  | .equ    SIGNATURE_002   = 0x05
|                  | 
|                  | #pragma AVRPART CORE CORE_VERSION V2E
|                  | 
|                  | 
|                  | ; ***** I/O REGISTER DEFINITIONS *****************************************
|                  | ; NOTE:
|                  | ; Definitions marked "MEMORY MAPPED"are extended I/O ports
|                  | ; and cannot be used with IN/OUT instructions
|                  | .equ    UDR0    = 0xc6  ; MEMORY MAPPED
|                  | .equ    UBRR0H  = 0xc5  ; MEMORY MAPPED
|                  | .equ    UBRR0L  = 0xc4  ; MEMORY MAPPED
|                  | .equ    UCSR0C  = 0xc2  ; MEMORY MAPPED
|                  | .equ    UCSR0B  = 0xc1  ; MEMORY MAPPED
|                  | .equ    UCSR0A  = 0xc0  ; MEMORY MAPPED
|                  | .equ    TWAMR   = 0xbd  ; MEMORY MAPPED
|                  | .equ    TWCR    = 0xbc  ; MEMORY MAPPED
|                  | .equ    TWDR    = 0xbb  ; MEMORY MAPPED
|                  | .equ    TWAR    = 0xba  ; MEMORY MAPPED
|                  | .equ    TWSR    = 0xb9  ; MEMORY MAPPED
|                  | .equ    TWBR    = 0xb8  ; MEMORY MAPPED
|                  | .equ    ASSR    = 0xb6  ; MEMORY MAPPED
|                  | .equ    PRR     = 0x64  ; MEMORY MAPPED
|                  | .equ    OCR2B   = 0xb4  ; MEMORY MAPPED
|                  | .equ    OCR2A   = 0xb3  ; MEMORY MAPPED
|                  | .equ    TCNT2   = 0xb2  ; MEMORY MAPPED
|                  | .equ    TCCR2B  = 0xb1  ; MEMORY MAPPED
|                  | .equ    TCCR2A  = 0xb0  ; MEMORY MAPPED
|                  | .equ    OCR1BH  = 0x8b  ; MEMORY MAPPED
|                  | .equ    OCR1BL  = 0x8a  ; MEMORY MAPPED
|                  | .equ    OCR1AH  = 0x89  ; MEMORY MAPPED
|                  | .equ    OCR1AL  = 0x88  ; MEMORY MAPPED
|                  | .equ    ICR1H   = 0x87  ; MEMORY MAPPED
|                  | .equ    ICR1L   = 0x86  ; MEMORY MAPPED
|                  | .equ    TCNT1H  = 0x85  ; MEMORY MAPPED
|                  | .equ    TCNT1L  = 0x84  ; MEMORY MAPPED
|                  | .equ    TCCR1C  = 0x82  ; MEMORY MAPPED
|                  | .equ    TCCR1B  = 0x81  ; MEMORY MAPPED
|                  | .equ    TCCR1A  = 0x80  ; MEMORY MAPPED
|                  | .equ    DIDR1   = 0x7f  ; MEMORY MAPPED
|                  | .equ    DIDR0   = 0x7e  ; MEMORY MAPPED
|                  | .equ    ADMUX   = 0x7c  ; MEMORY MAPPED
|                  | .equ    ADCSRB  = 0x7b  ; MEMORY MAPPED
|                  | .equ    ADCSRA  = 0x7a  ; MEMORY MAPPED
|                  | .equ    ADCH    = 0x79  ; MEMORY MAPPED
|                  | .equ    ADCL    = 0x78  ; MEMORY MAPPED
|                  | .equ    TIMSK2  = 0x70  ; MEMORY MAPPED
|                  | .equ    TIMSK1  = 0x6f  ; MEMORY MAPPED
|                  | .equ    TIMSK0  = 0x6e  ; MEMORY MAPPED
|                  | .equ    PCMSK2  = 0x6d  ; MEMORY MAPPED
|                  | .equ    PCMSK1  = 0x6c  ; MEMORY MAPPED
|                  | .equ    PCMSK0  = 0x6b  ; MEMORY MAPPED
|                  | .equ    EICRA   = 0x69  ; MEMORY MAPPED
|                  | .equ    PCICR   = 0x68  ; MEMORY MAPPED
|                  | .equ    OSCCAL  = 0x66  ; MEMORY MAPPED
|                  | .equ    CLKPR   = 0x61  ; MEMORY MAPPED
|                  | .equ    WDTCSR  = 0x60  ; MEMORY MAPPED
|                  | .equ    SREG    = 0x3f
|                  | .equ    SPH     = 0x3e
|                  | .equ    SPL     = 0x3d
|                  | .equ    SPMCSR  = 0x37
|                  | .equ    MCUCR   = 0x35
|                  | .equ    MCUSR   = 0x34
|                  | .equ    SMCR    = 0x33
|                  | .equ    ACSR    = 0x30
|                  | .equ    SPDR    = 0x2e
|                  | .equ    SPSR    = 0x2d
|                  | .equ    SPCR    = 0x2c
|                  | .equ    GPIOR2  = 0x2b
|                  | .equ    GPIOR1  = 0x2a
|                  | .equ    OCR0B   = 0x28
|                  | .equ    OCR0A   = 0x27
|                  | .equ    TCNT0   = 0x26
|                  | .equ    TCCR0B  = 0x25
|                  | .equ    TCCR0A  = 0x24
|                  | .equ    GTCCR   = 0x23
|                  | .equ    EEARH   = 0x22
|                  | .equ    EEARL   = 0x21
|                  | .equ    EEDR    = 0x20
|                  | .equ    EECR    = 0x1f
|                  | .equ    GPIOR0  = 0x1e
|                  | .equ    EIMSK   = 0x1d
|                  | .equ    EIFR    = 0x1c
|                  | .equ    PCIFR   = 0x1b
|                  | .equ    TIFR2   = 0x17
|                  | .equ    TIFR1   = 0x16
|                  | .equ    TIFR0   = 0x15
|                  | .equ    PORTD   = 0x0b
|                  | .equ    DDRD    = 0x0a
|                  | .equ    PIND    = 0x09
|                  | .equ    PORTC   = 0x08
|                  | .equ    DDRC    = 0x07
|                  | .equ    PINC    = 0x06
|                  | .equ    PORTB   = 0x05
|                  | .equ    DDRB    = 0x04
|                  | .equ    PINB    = 0x03
|                  | 
|                  | 
|                  | ; ***** BIT DEFINITIONS **************************************************
|                  | 
|                  | ; ***** USART0 ***********************
|                  | ; UDR0 - USART I/O Data Register
|                  | .equ    UDR0_0  = 0     ; USART I/O Data Register bit 0
|                  | .equ    UDR0_1  = 1     ; USART I/O Data Register bit 1
|                  | .equ    UDR0_2  = 2     ; USART I/O Data Register bit 2
|                  | .equ    UDR0_3  = 3     ; USART I/O Data Register bit 3
|                  | .equ    UDR0_4  = 4     ; USART I/O Data Register bit 4
|                  | .equ    UDR0_5  = 5     ; USART I/O Data Register bit 5
|                  | .equ    UDR0_6  = 6     ; USART I/O Data Register bit 6
|                  | .equ    UDR0_7  = 7     ; USART I/O Data Register bit 7
|                  | 
|                  | ; UCSR0A - USART Control and Status Register A
|                  | .equ    MPCM0   = 0     ; Multi-processor Communication Mode
|                  | .equ    U2X0    = 1     ; Double the USART transmission speed
|                  | .equ    UPE0    = 2     ; Parity Error
|                  | .equ    DOR0    = 3     ; Data overRun
|                  | .equ    FE0     = 4     ; Framing Error
|                  | .equ    UDRE0   = 5     ; USART Data Register Empty
|                  | .equ    TXC0    = 6     ; USART Transmitt Complete
|                  | .equ    RXC0    = 7     ; USART Receive Complete
|                  | 
|                  | ; UCSR0B - USART Control and Status Register B
|                  | .equ    TXB80   = 0     ; Transmit Data Bit 8
|                  | .equ    RXB80   = 1     ; Receive Data Bit 8
|                  | .equ    UCSZ02  = 2     ; Character Size
|                  | .equ    TXEN0   = 3     ; Transmitter Enable
|                  | .equ    RXEN0   = 4     ; Receiver Enable
|                  | .equ    UDRIE0  = 5     ; USART Data register Empty Interrupt Enable
|                  | .equ    TXCIE0  = 6     ; TX Complete Interrupt Enable
|                  | .equ    RXCIE0  = 7     ; RX Complete Interrupt Enable
|                  | 
|                  | ; UCSR0C - USART Control and Status Register C
|                  | .equ    UCPOL0  = 0     ; Clock Polarity
|                  | .equ    UCSZ00  = 1     ; Character Size
|                  | .equ    UCPHA0  = UCSZ00        ; For compatibility
|                  | .equ    UCSZ01  = 2     ; Character Size
|                  | .equ    UDORD0  = UCSZ01        ; For compatibility
|                  | .equ    USBS0   = 3     ; Stop Bit Select
|                  | .equ    UPM00   = 4     ; Parity Mode Bit 0
|                  | .equ    UPM01   = 5     ; Parity Mode Bit 1
|                  | .equ    UMSEL00 = 6     ; USART Mode Select
|                  | .equ    UMSEL0  = UMSEL00       ; For compatibility
|                  | .equ    UMSEL01 = 7     ; USART Mode Select
|                  | .equ    UMSEL1  = UMSEL01       ; For compatibility
|                  | 
|                  | 
|                  | ; ***** TWI **************************
|                  | ; TWAMR - TWI (Slave) Address Mask Register
|                  | .equ    TWAM0   = 1     ; 
|                  | .equ    TWAMR0  = TWAM0 ; For compatibility
|                  | .equ    TWAM1   = 2     ; 
|                  | .equ    TWAMR1  = TWAM1 ; For compatibility
|                  | .equ    TWAM2   = 3     ; 
|                  | .equ    TWAMR2  = TWAM2 ; For compatibility
|                  | .equ    TWAM3   = 4     ; 
|                  | .equ    TWAMR3  = TWAM3 ; For compatibility
|                  | .equ    TWAM4   = 5     ; 
|                  | .equ    TWAMR4  = TWAM4 ; For compatibility
|                  | .equ    TWAM5   = 6     ; 
|                  | .equ    TWAMR5  = TWAM5 ; For compatibility
|                  | .equ    TWAM6   = 7     ; 
|                  | .equ    TWAMR6  = TWAM6 ; For compatibility
|                  | 
|                  | ; TWBR - TWI Bit Rate register
|                  | .equ    TWBR0   = 0     ; 
|                  | .equ    TWBR1   = 1     ; 
|                  | .equ    TWBR2   = 2     ; 
|                  | .equ    TWBR3   = 3     ; 
|                  | .equ    TWBR4   = 4     ; 
|                  | .equ    TWBR5   = 5     ; 
|                  | .equ    TWBR6   = 6     ; 
|                  | .equ    TWBR7   = 7     ; 
|                  | 
|                  | ; TWCR - TWI Control Register
|                  | .equ    TWIE    = 0     ; TWI Interrupt Enable
|                  | .equ    TWEN    = 2     ; TWI Enable Bit
|                  | .equ    TWWC    = 3     ; TWI Write Collition Flag
|                  | .equ    TWSTO   = 4     ; TWI Stop Condition Bit
|                  | .equ    TWSTA   = 5     ; TWI Start Condition Bit
|                  | .equ    TWEA    = 6     ; TWI Enable Acknowledge Bit
|                  | .equ    TWINT   = 7     ; TWI Interrupt Flag
|                  | 
|                  | ; TWSR - TWI Status Register
|                  | .equ    TWPS0   = 0     ; TWI Prescaler
|                  | .equ    TWPS1   = 1     ; TWI Prescaler
|                  | .equ    TWS3    = 3     ; TWI Status
|                  | .equ    TWS4    = 4     ; TWI Status
|                  | .equ    TWS5    = 5     ; TWI Status
|                  | .equ    TWS6    = 6     ; TWI Status
|                  | .equ    TWS7    = 7     ; TWI Status
|                  | 
|                  | ; TWDR - TWI Data register
|                  | .equ    TWD0    = 0     ; TWI Data Register Bit 0
|                  | .equ    TWD1    = 1     ; TWI Data Register Bit 1
|                  | .equ    TWD2    = 2     ; TWI Data Register Bit 2
|                  | .equ    TWD3    = 3     ; TWI Data Register Bit 3
|                  | .equ    TWD4    = 4     ; TWI Data Register Bit 4
|                  | .equ    TWD5    = 5     ; TWI Data Register Bit 5
|                  | .equ    TWD6    = 6     ; TWI Data Register Bit 6
|                  | .equ    TWD7    = 7     ; TWI Data Register Bit 7
|                  | 
|                  | ; TWAR - TWI (Slave) Address register
|                  | .equ    TWGCE   = 0     ; TWI General Call Recognition Enable Bit
|                  | .equ    TWA0    = 1     ; TWI (Slave) Address register Bit 0
|                  | .equ    TWA1    = 2     ; TWI (Slave) Address register Bit 1
|                  | .equ    TWA2    = 3     ; TWI (Slave) Address register Bit 2
|                  | .equ    TWA3    = 4     ; TWI (Slave) Address register Bit 3
|                  | .equ    TWA4    = 5     ; TWI (Slave) Address register Bit 4
|                  | .equ    TWA5    = 6     ; TWI (Slave) Address register Bit 5
|                  | .equ    TWA6    = 7     ; TWI (Slave) Address register Bit 6
|                  | 
|                  | 
|                  | ; ***** TIMER_COUNTER_1 **************
|                  | ; TIMSK1 - Timer/Counter Interrupt Mask Register
|                  | .equ    TOIE1   = 0     ; Timer/Counter1 Overflow Interrupt Enable
|                  | .equ    OCIE1A  = 1     ; Timer/Counter1 Output CompareA Match Interrupt Enable
|                  | .equ    OCIE1B  = 2     ; Timer/Counter1 Output CompareB Match Interrupt Enable
|                  | .equ    ICIE1   = 5     ; Timer/Counter1 Input Capture Interrupt Enable
|                  | 
|                  | ; TIFR1 - Timer/Counter Interrupt Flag register
|                  | .equ    TOV1    = 0     ; Timer/Counter1 Overflow Flag
|                  | .equ    OCF1A   = 1     ; Output Compare Flag 1A
|                  | .equ    OCF1B   = 2     ; Output Compare Flag 1B
|                  | .equ    ICF1    = 5     ; Input Capture Flag 1
|                  | 
|                  | ; TCCR1A - Timer/Counter1 Control Register A
|                  | .equ    WGM10   = 0     ; Waveform Generation Mode
|                  | .equ    WGM11   = 1     ; Waveform Generation Mode
|                  | .equ    COM1B0  = 4     ; Compare Output Mode 1B, bit 0
|                  | .equ    COM1B1  = 5     ; Compare Output Mode 1B, bit 1
|                  | .equ    COM1A0  = 6     ; Comparet Ouput Mode 1A, bit 0
|                  | .equ    COM1A1  = 7     ; Compare Output Mode 1A, bit 1
|                  | 
|                  | ; TCCR1B - Timer/Counter1 Control Register B
|                  | .equ    CS10    = 0     ; Prescaler source of Timer/Counter 1
|                  | .equ    CS11    = 1     ; Prescaler source of Timer/Counter 1
|                  | .equ    CS12    = 2     ; Prescaler source of Timer/Counter 1
|                  | .equ    WGM12   = 3     ; Waveform Generation Mode
|                  | .equ    WGM13   = 4     ; Waveform Generation Mode
|                  | .equ    ICES1   = 6     ; Input Capture 1 Edge Select
|                  | .equ    ICNC1   = 7     ; Input Capture 1 Noise Canceler
|                  | 
|                  | ; TCCR1C - Timer/Counter1 Control Register C
|                  | .equ    FOC1B   = 6     ; 
|                  | .equ    FOC1A   = 7     ; 
|                  | 
|                  | ; GTCCR - General Timer/Counter Control Register
|                  | .equ    PSRSYNC = 0     ; Prescaler Reset Timer/Counter1 and Timer/Counter0
|                  | .equ    TSM     = 7     ; Timer/Counter Synchronization Mode
|                  | 
|                  | 
|                  | ; ***** TIMER_COUNTER_2 **************
|                  | ; TIMSK2 - Timer/Counter Interrupt Mask register
|                  | .equ    TOIE2   = 0     ; Timer/Counter2 Overflow Interrupt Enable
|                  | .equ    TOIE2A  = TOIE2 ; For compatibility
|                  | .equ    OCIE2A  = 1     ; Timer/Counter2 Output Compare Match A Interrupt Enable
|                  | .equ    OCIE2B  = 2     ; Timer/Counter2 Output Compare Match B Interrupt Enable
|                  | 
|                  | ; TIFR2 - Timer/Counter Interrupt Flag Register
|                  | .equ    TOV2    = 0     ; Timer/Counter2 Overflow Flag
|                  | .equ    OCF2A   = 1     ; Output Compare Flag 2A
|                  | .equ    OCF2B   = 2     ; Output Compare Flag 2B
|                  | 
|                  | ; TCCR2A - Timer/Counter2 Control Register A
|                  | .equ    WGM20   = 0     ; Waveform Genration Mode
|                  | .equ    WGM21   = 1     ; Waveform Genration Mode
|                  | .equ    COM2B0  = 4     ; Compare Output Mode bit 0
|                  | .equ    COM2B1  = 5     ; Compare Output Mode bit 1
|                  | .equ    COM2A0  = 6     ; Compare Output Mode bit 1
|                  | .equ    COM2A1  = 7     ; Compare Output Mode bit 1
|                  | 
|                  | ; TCCR2B - Timer/Counter2 Control Register B
|                  | .equ    CS20    = 0     ; Clock Select bit 0
|                  | .equ    CS21    = 1     ; Clock Select bit 1
|                  | .equ    CS22    = 2     ; Clock Select bit 2
|                  | .equ    WGM22   = 3     ; Waveform Generation Mode
|                  | .equ    FOC2B   = 6     ; Force Output Compare B
|                  | .equ    FOC2A   = 7     ; Force Output Compare A
|                  | 
|                  | ; TCNT2 - Timer/Counter2
|                  | .equ    TCNT2_0 = 0     ; Timer/Counter 2 bit 0
|                  | .equ    TCNT2_1 = 1     ; Timer/Counter 2 bit 1
|                  | .equ    TCNT2_2 = 2     ; Timer/Counter 2 bit 2
|                  | .equ    TCNT2_3 = 3     ; Timer/Counter 2 bit 3
|                  | .equ    TCNT2_4 = 4     ; Timer/Counter 2 bit 4
|                  | .equ    TCNT2_5 = 5     ; Timer/Counter 2 bit 5
|                  | .equ    TCNT2_6 = 6     ; Timer/Counter 2 bit 6
|                  | .equ    TCNT2_7 = 7     ; Timer/Counter 2 bit 7
|                  | 
|                  | ; OCR2A - Timer/Counter2 Output Compare Register A
|                  | .equ    OCR2_0  = 0     ; Timer/Counter2 Output Compare Register Bit 0
|                  | .equ    OCR2_1  = 1     ; Timer/Counter2 Output Compare Register Bit 1
|                  | .equ    OCR2_2  = 2     ; Timer/Counter2 Output Compare Register Bit 2
|                  | .equ    OCR2_3  = 3     ; Timer/Counter2 Output Compare Register Bit 3
|                  | .equ    OCR2_4  = 4     ; Timer/Counter2 Output Compare Register Bit 4
|                  | .equ    OCR2_5  = 5     ; Timer/Counter2 Output Compare Register Bit 5
|                  | .equ    OCR2_6  = 6     ; Timer/Counter2 Output Compare Register Bit 6
|                  | .equ    OCR2_7  = 7     ; Timer/Counter2 Output Compare Register Bit 7
|                  | 
|                  | ; OCR2B - Timer/Counter2 Output Compare Register B
|                  | ;.equ   OCR2_0  = 0     ; Timer/Counter2 Output Compare Register Bit 0
|                  | ;.equ   OCR2_1  = 1     ; Timer/Counter2 Output Compare Register Bit 1
|                  | ;.equ   OCR2_2  = 2     ; Timer/Counter2 Output Compare Register Bit 2
|                  | ;.equ   OCR2_3  = 3     ; Timer/Counter2 Output Compare Register Bit 3
|                  | ;.equ   OCR2_4  = 4     ; Timer/Counter2 Output Compare Register Bit 4
|                  | ;.equ   OCR2_5  = 5     ; Timer/Counter2 Output Compare Register Bit 5
|                  | ;.equ   OCR2_6  = 6     ; Timer/Counter2 Output Compare Register Bit 6
|                  | ;.equ   OCR2_7  = 7     ; Timer/Counter2 Output Compare Register Bit 7
|                  | 
|                  | ; ASSR - Asynchronous Status Register
|                  | .equ    TCR2BUB = 0     ; Timer/Counter Control Register2 Update Busy
|                  | .equ    TCR2AUB = 1     ; Timer/Counter Control Register2 Update Busy
|                  | .equ    OCR2BUB = 2     ; Output Compare Register 2 Update Busy
|                  | .equ    OCR2AUB = 3     ; Output Compare Register2 Update Busy
|                  | .equ    TCN2UB  = 4     ; Timer/Counter2 Update Busy
|                  | .equ    AS2     = 5     ; Asynchronous Timer/Counter2
|                  | .equ    EXCLK   = 6     ; Enable External Clock Input
|                  | 
|                  | ; GTCCR - General Timer Counter Control register
|                  | .equ    PSRASY  = 1     ; Prescaler Reset Timer/Counter2
|                  | .equ    PSR2    = PSRASY        ; For compatibility
|                  | ;.equ   TSM     = 7     ; Timer/Counter Synchronization Mode
|                  | 
|                  | 
|                  | ; ***** AD_CONVERTER *****************
|                  | ; ADMUX - The ADC multiplexer Selection Register
|                  | .equ    MUX0    = 0     ; Analog Channel and Gain Selection Bits
|                  | .equ    MUX1    = 1     ; Analog Channel and Gain Selection Bits
|                  | .equ    MUX2    = 2     ; Analog Channel and Gain Selection Bits
|                  | .equ    MUX3    = 3     ; Analog Channel and Gain Selection Bits
|                  | .equ    ADLAR   = 5     ; Left Adjust Result
|                  | .equ    REFS0   = 6     ; Reference Selection Bit 0
|                  | .equ    REFS1   = 7     ; Reference Selection Bit 1
|                  | 
|                  | ; ADCSRA - The ADC Control and Status register A
|                  | .equ    ADPS0   = 0     ; ADC  Prescaler Select Bits
|                  | .equ    ADPS1   = 1     ; ADC  Prescaler Select Bits
|                  | .equ    ADPS2   = 2     ; ADC  Prescaler Select Bits
|                  | .equ    ADIE    = 3     ; ADC Interrupt Enable
|                  | .equ    ADIF    = 4     ; ADC Interrupt Flag
|                  | .equ    ADATE   = 5     ; ADC  Auto Trigger Enable
|                  | .equ    ADSC    = 6     ; ADC Start Conversion
|                  | .equ    ADEN    = 7     ; ADC Enable
|                  | 
|                  | ; ADCSRB - The ADC Control and Status register B
|                  | .equ    ADTS0   = 0     ; ADC Auto Trigger Source bit 0
|                  | .equ    ADTS1   = 1     ; ADC Auto Trigger Source bit 1
|                  | .equ    ADTS2   = 2     ; ADC Auto Trigger Source bit 2
|                  | .equ    ACME    = 6     ; 
|                  | 
|                  | ; ADCH - ADC Data Register High Byte
|                  | .equ    ADCH0   = 0     ; ADC Data Register High Byte Bit 0
|                  | .equ    ADCH1   = 1     ; ADC Data Register High Byte Bit 1
|                  | .equ    ADCH2   = 2     ; ADC Data Register High Byte Bit 2
|                  | .equ    ADCH3   = 3     ; ADC Data Register High Byte Bit 3
|                  | .equ    ADCH4   = 4     ; ADC Data Register High Byte Bit 4
|                  | .equ    ADCH5   = 5     ; ADC Data Register High Byte Bit 5
|                  | .equ    ADCH6   = 6     ; ADC Data Register High Byte Bit 6
|                  | .equ    ADCH7   = 7     ; ADC Data Register High Byte Bit 7
|                  | 
|                  | ; ADCL - ADC Data Register Low Byte
|                  | .equ    ADCL0   = 0     ; ADC Data Register Low Byte Bit 0
|                  | .equ    ADCL1   = 1     ; ADC Data Register Low Byte Bit 1
|                  | .equ    ADCL2   = 2     ; ADC Data Register Low Byte Bit 2
|                  | .equ    ADCL3   = 3     ; ADC Data Register Low Byte Bit 3
|                  | .equ    ADCL4   = 4     ; ADC Data Register Low Byte Bit 4
|                  | .equ    ADCL5   = 5     ; ADC Data Register Low Byte Bit 5
|                  | .equ    ADCL6   = 6     ; ADC Data Register Low Byte Bit 6
|                  | .equ    ADCL7   = 7     ; ADC Data Register Low Byte Bit 7
|                  | 
|                  | ; DIDR0 - Digital Input Disable Register
|                  | .equ    ADC0D   = 0     ; 
|                  | .equ    ADC1D   = 1     ; 
|                  | .equ    ADC2D   = 2     ; 
|                  | .equ    ADC3D   = 3     ; 
|                  | .equ    ADC4D   = 4     ; 
|                  | .equ    ADC5D   = 5     ; 
|                  | 
|                  | 
|                  | ; ***** ANALOG_COMPARATOR ************
|                  | ; ACSR - Analog Comparator Control And Status Register
|                  | .equ    ACIS0   = 0     ; Analog Comparator Interrupt Mode Select bit 0
|                  | .equ    ACIS1   = 1     ; Analog Comparator Interrupt Mode Select bit 1
|                  | .equ    ACIC    = 2     ; 
|                  | .equ    ACIE    = 3     ; Analog Comparator Interrupt Enable
|                  | .equ    ACI     = 4     ; Analog Comparator Interrupt Flag
|                  | .equ    ACO     = 5     ; Analog Compare Output
|                  | .equ    ACBG    = 6     ; Analog Comparator Bandgap Select
|                  | .equ    ACD     = 7     ; Analog Comparator Disable
|                  | 
|                  | ; DIDR1 - Digital Input Disable Register 1
|                  | .equ    AIN0D   = 0     ; AIN0 Digital Input Disable
|                  | .equ    AIN1D   = 1     ; AIN1 Digital Input Disable
|                  | 
|                  | 
|                  | ; ***** PORTB ************************
|                  | ; PORTB - Port B Data Register
|                  | .equ    PORTB0  = 0     ; Port B Data Register bit 0
|                  | .equ    PB0     = 0     ; For compatibility
|                  | .equ    PORTB1  = 1     ; Port B Data Register bit 1
|                  | .equ    PB1     = 1     ; For compatibility
|                  | .equ    PORTB2  = 2     ; Port B Data Register bit 2
|                  | .equ    PB2     = 2     ; For compatibility
|                  | .equ    PORTB3  = 3     ; Port B Data Register bit 3
|                  | .equ    PB3     = 3     ; For compatibility
|                  | .equ    PORTB4  = 4     ; Port B Data Register bit 4
|                  | .equ    PB4     = 4     ; For compatibility
|                  | .equ    PORTB5  = 5     ; Port B Data Register bit 5
|                  | .equ    PB5     = 5     ; For compatibility
|                  | .equ    PORTB6  = 6     ; Port B Data Register bit 6
|                  | .equ    PB6     = 6     ; For compatibility
|                  | .equ    PORTB7  = 7     ; Port B Data Register bit 7
|                  | .equ    PB7     = 7     ; For compatibility
|                  | 
|                  | ; DDRB - Port B Data Direction Register
|                  | .equ    DDB0    = 0     ; Port B Data Direction Register bit 0
|                  | .equ    DDB1    = 1     ; Port B Data Direction Register bit 1
|                  | .equ    DDB2    = 2     ; Port B Data Direction Register bit 2
|                  | .equ    DDB3    = 3     ; Port B Data Direction Register bit 3
|                  | .equ    DDB4    = 4     ; Port B Data Direction Register bit 4
|                  | .equ    DDB5    = 5     ; Port B Data Direction Register bit 5
|                  | .equ    DDB6    = 6     ; Port B Data Direction Register bit 6
|                  | .equ    DDB7    = 7     ; Port B Data Direction Register bit 7
|                  | 
|                  | ; PINB - Port B Input Pins
|                  | .equ    PINB0   = 0     ; Port B Input Pins bit 0
|                  | .equ    PINB1   = 1     ; Port B Input Pins bit 1
|                  | .equ    PINB2   = 2     ; Port B Input Pins bit 2
|                  | .equ    PINB3   = 3     ; Port B Input Pins bit 3
|                  | .equ    PINB4   = 4     ; Port B Input Pins bit 4
|                  | .equ    PINB5   = 5     ; Port B Input Pins bit 5
|                  | .equ    PINB6   = 6     ; Port B Input Pins bit 6
|                  | .equ    PINB7   = 7     ; Port B Input Pins bit 7
|                  | 
|                  | 
|                  | ; ***** PORTC ************************
|                  | ; PORTC - Port C Data Register
|                  | .equ    PORTC0  = 0     ; Port C Data Register bit 0
|                  | .equ    PC0     = 0     ; For compatibility
|                  | .equ    PORTC1  = 1     ; Port C Data Register bit 1
|                  | .equ    PC1     = 1     ; For compatibility
|                  | .equ    PORTC2  = 2     ; Port C Data Register bit 2
|                  | .equ    PC2     = 2     ; For compatibility
|                  | .equ    PORTC3  = 3     ; Port C Data Register bit 3
|                  | .equ    PC3     = 3     ; For compatibility
|                  | .equ    PORTC4  = 4     ; Port C Data Register bit 4
|                  | .equ    PC4     = 4     ; For compatibility
|                  | .equ    PORTC5  = 5     ; Port C Data Register bit 5
|                  | .equ    PC5     = 5     ; For compatibility
|                  | .equ    PORTC6  = 6     ; Port C Data Register bit 6
|                  | .equ    PC6     = 6     ; For compatibility
|                  | 
|                  | ; DDRC - Port C Data Direction Register
|                  | .equ    DDC0    = 0     ; Port C Data Direction Register bit 0
|                  | .equ    DDC1    = 1     ; Port C Data Direction Register bit 1
|                  | .equ    DDC2    = 2     ; Port C Data Direction Register bit 2
|                  | .equ    DDC3    = 3     ; Port C Data Direction Register bit 3
|                  | .equ    DDC4    = 4     ; Port C Data Direction Register bit 4
|                  | .equ    DDC5    = 5     ; Port C Data Direction Register bit 5
|                  | .equ    DDC6    = 6     ; Port C Data Direction Register bit 6
|                  | 
|                  | ; PINC - Port C Input Pins
|                  | .equ    PINC0   = 0     ; Port C Input Pins bit 0
|                  | .equ    PINC1   = 1     ; Port C Input Pins bit 1
|                  | .equ    PINC2   = 2     ; Port C Input Pins bit 2
|                  | .equ    PINC3   = 3     ; Port C Input Pins bit 3
|                  | .equ    PINC4   = 4     ; Port C Input Pins bit 4
|                  | .equ    PINC5   = 5     ; Port C Input Pins bit 5
|                  | .equ    PINC6   = 6     ; Port C Input Pins bit 6
|                  | 
|                  | 
|                  | ; ***** PORTD ************************
|                  | ; PORTD - Port D Data Register
|                  | .equ    PORTD0  = 0     ; Port D Data Register bit 0
|                  | .equ    PD0     = 0     ; For compatibility
|                  | .equ    PORTD1  = 1     ; Port D Data Register bit 1
|                  | .equ    PD1     = 1     ; For compatibility
|                  | .equ    PORTD2  = 2     ; Port D Data Register bit 2
|                  | .equ    PD2     = 2     ; For compatibility
|                  | .equ    PORTD3  = 3     ; Port D Data Register bit 3
|                  | .equ    PD3     = 3     ; For compatibility
|                  | .equ    PORTD4  = 4     ; Port D Data Register bit 4
|                  | .equ    PD4     = 4     ; For compatibility
|                  | .equ    PORTD5  = 5     ; Port D Data Register bit 5
|                  | .equ    PD5     = 5     ; For compatibility
|                  | .equ    PORTD6  = 6     ; Port D Data Register bit 6
|                  | .equ    PD6     = 6     ; For compatibility
|                  | .equ    PORTD7  = 7     ; Port D Data Register bit 7
|                  | .equ    PD7     = 7     ; For compatibility
|                  | 
|                  | ; DDRD - Port D Data Direction Register
|                  | .equ    DDD0    = 0     ; Port D Data Direction Register bit 0
|                  | .equ    DDD1    = 1     ; Port D Data Direction Register bit 1
|                  | .equ    DDD2    = 2     ; Port D Data Direction Register bit 2
|                  | .equ    DDD3    = 3     ; Port D Data Direction Register bit 3
|                  | .equ    DDD4    = 4     ; Port D Data Direction Register bit 4
|                  | .equ    DDD5    = 5     ; Port D Data Direction Register bit 5
|                  | .equ    DDD6    = 6     ; Port D Data Direction Register bit 6
|                  | .equ    DDD7    = 7     ; Port D Data Direction Register bit 7
|                  | 
|                  | ; PIND - Port D Input Pins
|                  | .equ    PIND0   = 0     ; Port D Input Pins bit 0
|                  | .equ    PIND1   = 1     ; Port D Input Pins bit 1
|                  | .equ    PIND2   = 2     ; Port D Input Pins bit 2
|                  | .equ    PIND3   = 3     ; Port D Input Pins bit 3
|                  | .equ    PIND4   = 4     ; Port D Input Pins bit 4
|                  | .equ    PIND5   = 5     ; Port D Input Pins bit 5
|                  | .equ    PIND6   = 6     ; Port D Input Pins bit 6
|                  | .equ    PIND7   = 7     ; Port D Input Pins bit 7
|                  | 
|                  | 
|                  | ; ***** TIMER_COUNTER_0 **************
|                  | ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
|                  | .equ    TOIE0   = 0     ; Timer/Counter0 Overflow Interrupt Enable
|                  | .equ    OCIE0A  = 1     ; Timer/Counter0 Output Compare Match A Interrupt Enable
|                  | .equ    OCIE0B  = 2     ; Timer/Counter0 Output Compare Match B Interrupt Enable
|                  | 
|                  | ; TIFR0 - Timer/Counter0 Interrupt Flag register
|                  | .equ    TOV0    = 0     ; Timer/Counter0 Overflow Flag
|                  | .equ    OCF0A   = 1     ; Timer/Counter0 Output Compare Flag 0A
|                  | .equ    OCF0B   = 2     ; Timer/Counter0 Output Compare Flag 0B
|                  | 
|                  | ; TCCR0A - Timer/Counter  Control Register A
|                  | .equ    WGM00   = 0     ; Waveform Generation Mode
|                  | .equ    WGM01   = 1     ; Waveform Generation Mode
|                  | .equ    COM0B0  = 4     ; Compare Output Mode, Fast PWm
|                  | .equ    COM0B1  = 5     ; Compare Output Mode, Fast PWm
|                  | .equ    COM0A0  = 6     ; Compare Output Mode, Phase Correct PWM Mode
|                  | .equ    COM0A1  = 7     ; Compare Output Mode, Phase Correct PWM Mode
|                  | 
|                  | ; TCCR0B - Timer/Counter Control Register B
|                  | .equ    CS00    = 0     ; Clock Select
|                  | .equ    CS01    = 1     ; Clock Select
|                  | .equ    CS02    = 2     ; Clock Select
|                  | .equ    WGM02   = 3     ; 
|                  | .equ    FOC0B   = 6     ; Force Output Compare B
|                  | .equ    FOC0A   = 7     ; Force Output Compare A
|                  | 
|                  | ; TCNT0 - Timer/Counter0
|                  | .equ    TCNT0_0 = 0     ; 
|                  | .equ    TCNT0_1 = 1     ; 
|                  | .equ    TCNT0_2 = 2     ; 
|                  | .equ    TCNT0_3 = 3     ; 
|                  | .equ    TCNT0_4 = 4     ; 
|                  | .equ    TCNT0_5 = 5     ; 
|                  | .equ    TCNT0_6 = 6     ; 
|                  | .equ    TCNT0_7 = 7     ; 
|                  | 
|                  | ; OCR0A - Timer/Counter0 Output Compare Register
|                  | .equ    OCROA_0 = 0     ; 
|                  | .equ    OCROA_1 = 1     ; 
|                  | .equ    OCROA_2 = 2     ; 
|                  | .equ    OCROA_3 = 3     ; 
|                  | .equ    OCROA_4 = 4     ; 
|                  | .equ    OCROA_5 = 5     ; 
|                  | .equ    OCROA_6 = 6     ; 
|                  | .equ    OCROA_7 = 7     ; 
|                  | 
|                  | ; OCR0B - Timer/Counter0 Output Compare Register
|                  | .equ    OCR0B_0 = 0     ; 
|                  | .equ    OCR0B_1 = 1     ; 
|                  | .equ    OCR0B_2 = 2     ; 
|                  | .equ    OCR0B_3 = 3     ; 
|                  | .equ    OCR0B_4 = 4     ; 
|                  | .equ    OCR0B_5 = 5     ; 
|                  | .equ    OCR0B_6 = 6     ; 
|                  | .equ    OCR0B_7 = 7     ; 
|                  | 
|                  | ; GTCCR - General Timer/Counter Control Register
|                  | ;.equ   PSRSYNC = 0     ; Prescaler Reset Timer/Counter1 and Timer/Counter0
|                  | .equ    PSR10   = PSRSYNC       ; For compatibility
|                  | ;.equ   TSM     = 7     ; Timer/Counter Synchronization Mode
|                  | 
|                  | 
|                  | ; ***** EXTERNAL_INTERRUPT ***********
|                  | ; EICRA - External Interrupt Control Register
|                  | .equ    ISC00   = 0     ; External Interrupt Sense Control 0 Bit 0
|                  | .equ    ISC01   = 1     ; External Interrupt Sense Control 0 Bit 1
|                  | .equ    ISC10   = 2     ; External Interrupt Sense Control 1 Bit 0
|                  | .equ    ISC11   = 3     ; External Interrupt Sense Control 1 Bit 1
|                  | 
|                  | ; EIMSK - External Interrupt Mask Register
|                  | .equ    INT0    = 0     ; External Interrupt Request 0 Enable
|                  | .equ    INT1    = 1     ; External Interrupt Request 1 Enable
|                  | 
|                  | ; EIFR - External Interrupt Flag Register
|                  | .equ    INTF0   = 0     ; External Interrupt Flag 0
|                  | .equ    INTF1   = 1     ; External Interrupt Flag 1
|                  | 
|                  | ; PCMSK2 - Pin Change Mask Register 2
|                  | .equ    PCINT16 = 0     ; Pin Change Enable Mask 16
|                  | .equ    PCINT17 = 1     ; Pin Change Enable Mask 17
|                  | .equ    PCINT18 = 2     ; Pin Change Enable Mask 18
|                  | .equ    PCINT19 = 3     ; Pin Change Enable Mask 19
|                  | .equ    PCINT20 = 4     ; Pin Change Enable Mask 20
|                  | .equ    PCINT21 = 5     ; Pin Change Enable Mask 21
|                  | .equ    PCINT22 = 6     ; Pin Change Enable Mask 22
|                  | .equ    PCINT23 = 7     ; Pin Change Enable Mask 23
|                  | 
|                  | ; PCMSK1 - Pin Change Mask Register 1
|                  | .equ    PCINT8  = 0     ; Pin Change Enable Mask 8
|                  | .equ    PCINT9  = 1     ; Pin Change Enable Mask 9
|                  | .equ    PCINT10 = 2     ; Pin Change Enable Mask 10
|                  | .equ    PCINT11 = 3     ; Pin Change Enable Mask 11
|                  | .equ    PCINT12 = 4     ; Pin Change Enable Mask 12
|                  | .equ    PCINT13 = 5     ; Pin Change Enable Mask 13
|                  | .equ    PCINT14 = 6     ; Pin Change Enable Mask 14
|                  | 
|                  | ; PCMSK0 - Pin Change Mask Register 0
|                  | .equ    PCINT0  = 0     ; Pin Change Enable Mask 0
|                  | .equ    PCINT1  = 1     ; Pin Change Enable Mask 1
|                  | .equ    PCINT2  = 2     ; Pin Change Enable Mask 2
|                  | .equ    PCINT3  = 3     ; Pin Change Enable Mask 3
|                  | .equ    PCINT4  = 4     ; Pin Change Enable Mask 4
|                  | .equ    PCINT5  = 5     ; Pin Change Enable Mask 5
|                  | .equ    PCINT6  = 6     ; Pin Change Enable Mask 6
|                  | .equ    PCINT7  = 7     ; Pin Change Enable Mask 7
|                  | 
|                  | ; PCIFR - Pin Change Interrupt Flag Register
|                  | .equ    PCIF0   = 0     ; Pin Change Interrupt Flag 0
|                  | .equ    PCIF1   = 1     ; Pin Change Interrupt Flag 1
|                  | .equ    PCIF2   = 2     ; Pin Change Interrupt Flag 2
|                  | 
|                  | 
|                  | ; ***** SPI **************************
|                  | ; SPDR - SPI Data Register
|                  | .equ    SPDR0   = 0     ; SPI Data Register bit 0
|                  | .equ    SPDR1   = 1     ; SPI Data Register bit 1
|                  | .equ    SPDR2   = 2     ; SPI Data Register bit 2
|                  | .equ    SPDR3   = 3     ; SPI Data Register bit 3
|                  | .equ    SPDR4   = 4     ; SPI Data Register bit 4
|                  | .equ    SPDR5   = 5     ; SPI Data Register bit 5
|                  | .equ    SPDR6   = 6     ; SPI Data Register bit 6
|                  | .equ    SPDR7   = 7     ; SPI Data Register bit 7
|                  | 
|                  | ; SPSR - SPI Status Register
|                  | .equ    SPI2X   = 0     ; Double SPI Speed Bit
|                  | .equ    WCOL    = 6     ; Write Collision Flag
|                  | .equ    SPIF    = 7     ; SPI Interrupt Flag
|                  | 
|                  | ; SPCR - SPI Control Register
|                  | .equ    SPR0    = 0     ; SPI Clock Rate Select 0
|                  | .equ    SPR1    = 1     ; SPI Clock Rate Select 1
|                  | .equ    CPHA    = 2     ; Clock Phase
|                  | .equ    CPOL    = 3     ; Clock polarity
|                  | .equ    MSTR    = 4     ; Master/Slave Select
|                  | .equ    DORD    = 5     ; Data Order
|                  | .equ    SPE     = 6     ; SPI Enable
|                  | .equ    SPIE    = 7     ; SPI Interrupt Enable
|                  | 
|                  | 
|                  | ; ***** CPU **************************
|                  | ; SREG - Status Register
|                  | .equ    SREG_C  = 0     ; Carry Flag
|                  | .equ    SREG_Z  = 1     ; Zero Flag
|                  | .equ    SREG_N  = 2     ; Negative Flag
|                  | .equ    SREG_V  = 3     ; Two's Complement Overflow Flag
|                  | .equ    SREG_S  = 4     ; Sign Bit
|                  | .equ    SREG_H  = 5     ; Half Carry Flag
|                  | .equ    SREG_T  = 6     ; Bit Copy Storage
|                  | .equ    SREG_I  = 7     ; Global Interrupt Enable
|                  | 
|                  | ; OSCCAL - Oscillator Calibration Value
|                  | .equ    CAL0    = 0     ; Oscillator Calibration Value Bit0
|                  | .equ    CAL1    = 1     ; Oscillator Calibration Value Bit1
|                  | .equ    CAL2    = 2     ; Oscillator Calibration Value Bit2
|                  | .equ    CAL3    = 3     ; Oscillator Calibration Value Bit3
|                  | .equ    CAL4    = 4     ; Oscillator Calibration Value Bit4
|                  | .equ    CAL5    = 5     ; Oscillator Calibration Value Bit5
|                  | .equ    CAL6    = 6     ; Oscillator Calibration Value Bit6
|                  | .equ    CAL7    = 7     ; Oscillator Calibration Value Bit7
|                  | 
|                  | ; CLKPR - Clock Prescale Register
|                  | .equ    CLKPS0  = 0     ; Clock Prescaler Select Bit 0
|                  | .equ    CLKPS1  = 1     ; Clock Prescaler Select Bit 1
|                  | .equ    CLKPS2  = 2     ; Clock Prescaler Select Bit 2
|                  | .equ    CLKPS3  = 3     ; Clock Prescaler Select Bit 3
|                  | .equ    CLKPCE  = 7     ; Clock Prescaler Change Enable
|                  | 
|                  | ; SPMCSR - Store Program Memory Control Register
|                  | .equ    SELFPRGEN       = 0     ; Self Programming Enable
|                  | .equ    PGERS   = 1     ; Page Erase
|                  | .equ    PGWRT   = 2     ; Page Write
|                  | .equ    BLBSET  = 3     ; Boot Lock Bit Set
|                  | .equ    RWWSRE  = 4     ; Read-While-Write section read enable
|                  | .equ    RWWSB   = 6     ; Read-While-Write Section Busy
|                  | .equ    SPMIE   = 7     ; SPM Interrupt Enable
|                  | 
|                  | ; MCUCR - MCU Control Register
|                  | .equ    IVCE    = 0     ; 
|                  | .equ    PUD     = 4     ; 
|                  | 
|                  | ; MCUSR - MCU Status Register
|                  | .equ    PORF    = 0     ; Power-on reset flag
|                  | .equ    EXTRF   = 1     ; External Reset Flag
|                  | .equ    EXTREF  = EXTRF ; For compatibility
|                  | .equ    BORF    = 2     ; Brown-out Reset Flag
|                  | .equ    WDRF    = 3     ; Watchdog Reset Flag
|                  | 
|                  | ; SMCR - 
|                  | .equ    SE      = 0     ; 
|                  | .equ    SM0     = 1     ; 
|                  | .equ    SM1     = 2     ; 
|                  | .equ    SM2     = 3     ; 
|                  | 
|                  | ; GPIOR2 - General Purpose I/O Register 2
|                  | .equ    GPIOR20 = 0     ; 
|                  | .equ    GPIOR21 = 1     ; 
|                  | .equ    GPIOR22 = 2     ; 
|                  | .equ    GPIOR23 = 3     ; 
|                  | .equ    GPIOR24 = 4     ; 
|                  | .equ    GPIOR25 = 5     ; 
|                  | .equ    GPIOR26 = 6     ; 
|                  | .equ    GPIOR27 = 7     ; 
|                  | 
|                  | ; GPIOR1 - General Purpose I/O Register 1
|                  | .equ    GPIOR10 = 0     ; 
|                  | .equ    GPIOR11 = 1     ; 
|                  | .equ    GPIOR12 = 2     ; 
|                  | .equ    GPIOR13 = 3     ; 
|                  | .equ    GPIOR14 = 4     ; 
|                  | .equ    GPIOR15 = 5     ; 
|                  | .equ    GPIOR16 = 6     ; 
|                  | .equ    GPIOR17 = 7     ; 
|                  | 
|                  | ; GPIOR0 - General Purpose I/O Register 0
|                  | .equ    GPIOR00 = 0     ; 
|                  | .equ    GPIOR01 = 1     ; 
|                  | .equ    GPIOR02 = 2     ; 
|                  | .equ    GPIOR03 = 3     ; 
|                  | .equ    GPIOR04 = 4     ; 
|                  | .equ    GPIOR05 = 5     ; 
|                  | .equ    GPIOR06 = 6     ; 
|                  | .equ    GPIOR07 = 7     ; 
|                  | 
|                  | ; PRR - Power Reduction Register
|                  | .equ    PRADC   = 0     ; Power Reduction ADC
|                  | .equ    PRUSART0        = 1     ; Power Reduction USART
|                  | .equ    PRSPI   = 2     ; Power Reduction Serial Peripheral Interface
|                  | .equ    PRTIM1  = 3     ; Power Reduction Timer/Counter1
|                  | .equ    PRTIM0  = 5     ; Power Reduction Timer/Counter0
|                  | .equ    PRTIM2  = 6     ; Power Reduction Timer/Counter2
|                  | .equ    PRTWI   = 7     ; Power Reduction TWI
|                  | 
|                  | ; PCICR - 
|                  | .equ    PCIE0   = 0     ; 
|                  | .equ    PCIE1   = 1     ; 
|                  | .equ    PCIE2   = 2     ; 
|                  | 
|                  | 
|                  | ; ***** WATCHDOG *********************
|                  | ; WDTCSR - Watchdog Timer Control Register
|                  | .equ    WDP0    = 0     ; Watch Dog Timer Prescaler bit 0
|                  | .equ    WDP1    = 1     ; Watch Dog Timer Prescaler bit 1
|                  | .equ    WDP2    = 2     ; Watch Dog Timer Prescaler bit 2
|                  | .equ    WDE     = 3     ; Watch Dog Enable
|                  | .equ    WDCE    = 4     ; Watchdog Change Enable
|                  | .equ    WDP3    = 5     ; Watchdog Timer Prescaler Bit 3
|                  | .equ    WDIE    = 6     ; Watchdog Timeout Interrupt Enable
|                  | .equ    WDIF    = 7     ; Watchdog Timeout Interrupt Flag
|                  | 
|                  | 
|                  | ; ***** EEPROM ***********************
|                  | ; EEARL - EEPROM Address Register Low Byte
|                  | .equ    EEAR0   = 0     ; EEPROM Read/Write Access Bit 0
|                  | .equ    EEAR1   = 1     ; EEPROM Read/Write Access Bit 1
|                  | .equ    EEAR2   = 2     ; EEPROM Read/Write Access Bit 2
|                  | .equ    EEAR3   = 3     ; EEPROM Read/Write Access Bit 3
|                  | .equ    EEAR4   = 4     ; EEPROM Read/Write Access Bit 4
|                  | .equ    EEAR5   = 5     ; EEPROM Read/Write Access Bit 5
|                  | .equ    EEAR6   = 6     ; EEPROM Read/Write Access Bit 6
|                  | .equ    EEAR7   = 7     ; EEPROM Read/Write Access Bit 7
|                  | 
|                  | ; EEDR - EEPROM Data Register
|                  | .equ    EEDR0   = 0     ; EEPROM Data Register bit 0
|                  | .equ    EEDR1   = 1     ; EEPROM Data Register bit 1
|                  | .equ    EEDR2   = 2     ; EEPROM Data Register bit 2
|                  | .equ    EEDR3   = 3     ; EEPROM Data Register bit 3
|                  | .equ    EEDR4   = 4     ; EEPROM Data Register bit 4
|                  | .equ    EEDR5   = 5     ; EEPROM Data Register bit 5
|                  | .equ    EEDR6   = 6     ; EEPROM Data Register bit 6
|                  | .equ    EEDR7   = 7     ; EEPROM Data Register bit 7
|                  | 
|                  | ; EECR - EEPROM Control Register
|                  | .equ    EERE    = 0     ; EEPROM Read Enable
|                  | .equ    EEPE    = 1     ; EEPROM Write Enable
|                  | .equ    EEWE    = EEPE  ; For compatibility
|                  | .equ    EEMPE   = 2     ; EEPROM Master Write Enable
|                  | .equ    EEMWE   = EEMPE ; For compatibility
|                  | .equ    EERIE   = 3     ; EEPROM Ready Interrupt Enable
|                  | .equ    EEPM0   = 4     ; EEPROM Programming Mode Bit 0
|                  | .equ    EEPM1   = 5     ; EEPROM Programming Mode Bit 1
|                  | 
|                  | 
|                  | 
|                  | ; ***** LOCKSBITS ********************************************************
|                  | .equ    LB1     = 0     ; Lock bit
|                  | .equ    LB2     = 1     ; Lock bit
|                  | .equ    BLB01   = 2     ; Boot Lock bit
|                  | .equ    BLB02   = 3     ; Boot Lock bit
|                  | .equ    BLB11   = 4     ; Boot lock bit
|                  | .equ    BLB12   = 5     ; Boot lock bit
|                  | 
|                  | 
|                  | ; ***** FUSES ************************************************************
|                  | ; LOW fuse bits
|                  | .equ    CKSEL0  = 0     ; Select Clock Source
|                  | .equ    CKSEL1  = 1     ; Select Clock Source
|                  | .equ    CKSEL2  = 2     ; Select Clock Source
|                  | .equ    CKSEL3  = 3     ; Select Clock Source
|                  | .equ    SUT0    = 4     ; Select start-up time
|                  | .equ    SUT1    = 5     ; Select start-up time
|                  | .equ    CKOUT   = 6     ; Clock output
|                  | .equ    CKDIV8  = 7     ; Divide clock by 8
|                  | 
|                  | ; HIGH fuse bits
|                  | .equ    BODLEVEL0       = 0     ; Brown-out Detector trigger level
|                  | .equ    BODLEVEL1       = 1     ; Brown-out Detector trigger level
|                  | .equ    BODLEVEL2       = 2     ; Brown-out Detector trigger level
|                  | .equ    EESAVE  = 3     ; EEPROM memory is preserved through chip erase
|                  | .equ    WDTON   = 4     ; Watchdog Timer Always On
|                  | .equ    SPIEN   = 5     ; Enable Serial programming and Data Downloading
|                  | .equ    DWEN    = 6     ; debugWIRE Enable
|                  | .equ    RSTDISBL        = 7     ; External reset disable
|                  | 
|                  | ; EXTENDED fuse bits
|                  | ;.equ   SELFPRGEN       = 0     ; Self Programming Enable
|                  | 
|                  | 
|                  | 
|                  | ; ***** CPU REGISTER DEFINITIONS *****************************************
|                  | .def    XH      = r27
|                  | .def    XL      = r26
|                  | .def    YH      = r29
|                  | .def    YL      = r28
|                  | .def    ZH      = r31
|                  | .def    ZL      = r30
|                  | 
|                  | 
|                  | 
|                  | ; ***** DATA MEMORY DECLARATIONS *****************************************
|                  | .equ    FLASHEND        = 0x07ff        ; Note: Word address
|                  | .equ    IOEND   = 0x00ff
|                  | .equ    SRAM_START      = 0x0100
|                  | .equ    SRAM_SIZE       = 512
|                  | .equ    RAMEND  = 0x02ff
|                  | .equ    XRAMEND = 0x0000
|                  | .equ    E2END   = 0x00ff
|                  | .equ    EEPROMEND       = 0x00ff
|                  | .equ    EEADRBITS       = 8
|                  | #pragma AVRPART MEMORY PROG_FLASH 4096
|                  | #pragma AVRPART MEMORY EEPROM 256
|                  | #pragma AVRPART MEMORY INT_SRAM SIZE 512
|                  | #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
|                  | 
|                  | 
|                  | 
|                  | ; ***** BOOTLOADER DECLARATIONS ******************************************
|                  | .equ    NRWW_START_ADDR = 0x0
|                  | .equ    NRWW_STOP_ADDR  = 0x7ff
|                  | .equ    RWW_START_ADDR  = 0x0
|                  | .equ    RWW_STOP_ADDR   = 0x0
|                  | .equ    PAGESIZE        = 32
|                  | 
|                  | 
|                  | 
|                  | ; ***** INTERRUPT VECTORS ************************************************
|                  | .equ    INT0addr        = 0x0001        ; External Interrupt Request 0
|                  | .equ    INT1addr        = 0x0002        ; External Interrupt Request 1
|                  | .equ    PCI0addr        = 0x0003        ; Pin Change Interrupt Request 0
|                  | .equ    PCI1addr        = 0x0004        ; Pin Change Interrupt Request 0
|                  | .equ    PCI2addr        = 0x0005        ; Pin Change Interrupt Request 1
|                  | .equ    WDTaddr = 0x0006        ; Watchdog Time-out Interrupt
|                  | .equ    OC2Aaddr        = 0x0007        ; Timer/Counter2 Compare Match A
|                  | .equ    OC2Baddr        = 0x0008        ; Timer/Counter2 Compare Match A
|                  | .equ    OVF2addr        = 0x0009        ; Timer/Counter2 Overflow
|                  | .equ    ICP1addr        = 0x000a        ; Timer/Counter1 Capture Event
|                  | .equ    OC1Aaddr        = 0x000b        ; Timer/Counter1 Compare Match A
|                  | .equ    OC1Baddr        = 0x000c        ; Timer/Counter1 Compare Match B
|                  | .equ    OVF1addr        = 0x000d        ; Timer/Counter1 Overflow
|                  | .equ    OC0Aaddr        = 0x000e        ; TimerCounter0 Compare Match A
|                  | .equ    OC0Baddr        = 0x001f        ; TimerCounter0 Compare Match B
|                  | .equ    OVF0addr        = 0x0010        ; Timer/Couner0 Overflow
|                  | .equ    SPIaddr = 0x0011        ; SPI Serial Transfer Complete
|                  | .equ    URXCaddr        = 0x0012        ; USART Rx Complete
|                  | .equ    UDREaddr        = 0x0013        ; USART, Data Register Empty
|                  | .equ    UTXCaddr        = 0x0014        ; USART Tx Complete
|                  | .equ    ADCCaddr        = 0x0015        ; ADC Conversion Complete
|                  | .equ    ERDYaddr        = 0x0016        ; EEPROM Ready
|                  | .equ    ACIaddr = 0x0017        ; Analog Comparator
|                  | .equ    TWIaddr = 0x0018        ; Two-wire Serial Interface
|                  | .equ    SPMRaddr        = 0x0019        ; Store Program Memory Read
|                  | 
|                  | .equ    INT_VECTORS_SIZE        = 26    ; size in words
|                  | 
|                  | #endif  /* _M48DEF_INC_ */
|                  | 
|                  | ; ***** END OF FILE ******************************************************
|                  | 
|                  | 
|                  | .equ FOSC = 20000000
|                  | .equ T0 = 2
|                  | 
|                  | .macro mydelay
|                  |         ldi R16,30
|                  |         rcall DELAY3
|                  | .endm
|                  | 
|                  | .org 0
| 000000 C015      |         rjmp RESET ; Reset Handler
|                  | .org 0xB
| 00000B C033      |         rjmp TIM1_COMPA
|                  | .org 0xC
| 00000C C022      |         rjmp TIM1_COMPB
|                  | 
|                  | .include "mylib.m48"
|                  | 
|                  | .macro addi
|                  |         ldi r25,@1
|                  |         add @0,r25
|                  | .endm
|                  | 
|                  | .macro ldiw;
|                  |         ldi @0H,high(@1)
|                  |         ldi @0L,low(@1)
|                  | .endm
|                  | 
|                  | .macro adrw     ; add register @1 to word @0
|                  |         ;example: addw Z,R18
|                  |         ldi R25,0
|                  |         add @0L,@1
|                  |         adc @0H,R25
|                  | .endm
|                  | 
|                  | .macro outw     ; out register @1 to 16-bit io @0 (@0 = LOW part of 16bit io)
|                  |         ;example: outw TCNT1, R17
|                  | 
|                  |         ldi R25,0
|                  |         out @0H,R25
|                  |         out @0L,@1
|                  | .endm
|                  | 
|                  | .macro outi
|                  |         ldi R25,@1
|                  |         out @0,R25
|                  | .endm
|                  | .macro stsi
|                  |         ldi R25,@1
|                  |         sts @0,R25
|                  | .endm
|                  | 
|                  | .macro outiw    ; example: outiw TCNT1, 12345
|                  |         ldi R25,high(@1)
|                  |         out @0H,R25
|                  |         ldi R25,low(@1)
|                  |         out @0L,R25
|                  | .endm
|                  | 
|                  | .macro stsiw    ; example: outiw TCNT1, 12345
|                  |         ldi R25,high(@1)
|                  |         sts @0H,R25
|                  |         ldi R25,low(@1)
|                  |         sts @0L,R25
|                  | .endm
|                  | 
|                  | .macro lpmr; load program memory by label @0 plus register @1 to @2
|                  |         ldiw Z,@0/2
|                  |         adrw Z,@1
|                  |         lpm @2, Z
|                  | .endm
|                  | 
|                  | .macro IRQ_start
|                  |         cli
|                  |         push R16
|                  |         push R17
|                  |         push R18
|                  |         push R19
|                  |         in R16,SREG
|                  |         push R16
|                  | .endm
|                  | .macro IRQ_end
|                  |         pop R16
|                  |         out SREG,R16
|                  |         pop R19
|                  |         pop R18
|                  |         pop R17
|                  |         pop R16
|                  |         sei
|                  | .endm
|                  | .macro pushw
|                  |         push @0L
|                  |         push @0H
|                  | .endm
|                  | .macro popw
|                  |         pop @0H
|                  |         pop @0L
|                  | .endm
|                  | 
|                  | 
|                  | ; input: R16
|                  | DELAY3:
| 00000D E010      |         ldi R17,0
| 00000E E020      |         ldi R18,0
| 00000F 951A      | _LOOP:  dec R17
| 000010 F7F1      |         brne _LOOP
| 000011 952A      |         dec R18
| 000012 F7E1      |         brne _LOOP
| 000013 950A      |         dec R16
| 000014 F7D1      |         brne _LOOP
| 000015 9508      |         ret
|                  | 
|                  |         
|                  | 
|                  | 
|                  | RESET:
| 000016           >         outiw SP, RAMEND
| 00001A           >         outi DDRB,0xFF
| 00001C           >         outi DDRD,0xFF
|                  | 
| 00001E           >         stsi TIMSK1, 1 << OCIE1A | 1 << OCIE1B
| 000021           >         stsi TCCR1A, 0
| 000024           >         stsi TCCR1B, 0b00001001 ;set prescaler
|                  | 
| 000027           >                 stsiw TCNT1,0
|                  | 
|                  |         ;stsiw OCR1A,  45455
|                  |         ;stsiw OCR1B,  22727
|                  | 
| 00002D 94F8      |                 cli
|                  |         ;sei
|                  | 
| 00002E C084      |         rjmp MAIN
|                  | 
|                  | 
|                  | TIM1_COMPB:
| 00002F           >         IRQ_start
| 000036 D094      |         rcall AUDIO_1
| 000037           >         IRQ_end
| 00003E 9518      |         reti
|                  | 
|                  | TIM1_COMPA:
| 00003F           >         IRQ_start
| 000046 D089      |         rcall AUDIO_0
| 000047           >         IRQ_end
| 00004E 9518      |         reti
|                  | 
|                  | .include "notes.m48"
|                  | 
|                  | .equ Si3        = 1
|                  | .equ Lad3       = 2
|                  | .equ La3        = 3
|                  | .equ Sold3      = 4
|                  | .equ Sol3       = 5
|                  | .equ Fad3       = 6
|                  | .equ Fa3        = 7
|                  | .equ Mi3        = 8
|                  | .equ Red3       = 9
|                  | .equ Re3        = 10
|                  | .equ Dod3       = 11
|                  | .equ Do3        = 12
|                  | .equ Si2        = 13
|                  | .equ Lad2       = 14
|                  | .equ La2        = 15
|                  | .equ Sold2      = 16
|                  | .equ Sol2       = 17
|                  | .equ Fad2       = 18
|                  | .equ Fa2        = 19
|                  | .equ Mi2        = 20
|                  | .equ Red2       = 21
|                  | .equ Re2        = 22
|                  | .equ Dod2       = 23
|                  | .equ Do2        = 24
|                  | .equ Si1        = 25
|                  | .equ Lad1       = 26
|                  | .equ La1        = 27
|                  | .equ Sold1      = 28
|                  | .equ Sol1       = 29
|                  | .equ Fad1       = 30
|                  | .equ Fa1        = 31
|                  | .equ Mi1        = 32
|                  | .equ Red1       = 33
|                  | .equ Re1        = 34
|                  | .equ Dod1       = 35
|                  | .equ Do1        = 36
|                  | .equ Si0        = 37
|                  | .equ Lad0       = 38
|                  | .equ La0        = 39
|                  | .equ Sold0      = 40
|                  | .equ Sol0       = 41
|                  | .equ Fad0       = 42
|                  | .equ Fa0        = 43
|                  | .equ Mi0        = 44
|                  | .equ Red0       = 45
|                  | .equ Re0        = 46
|                  | .equ Dod0       = 47
|                  | .equ Do0       = 48
|                  | .equ Si00       = 49
|                  | .equ Lad00      = 50
|                  | .equ La00       = 51
|                  | .equ Sold00     = 52
|                  | .equ Sol00      = 53
|                  | .equ Fad00      = 54
|                  | .equ Fa00       = 55
|                  | .equ Mi00       = 56
|                  | .equ Red00      = 57
|                  | .equ Re00       = 58
|                  | .equ Dod00      = 59
|                  | .equ Do00       = 60
|                  | 
|                  | .equ DIV1_NOTE = 34
|                  | 
|                  | NOTE_DIVS:
|                  | ;3oct
| 00004F 8927 E329 | .dw FOSC/1976, FOSC/1865, FOSC/1720, FOSC/1661, FOSC/1568, FOSC/1480
| 000051 6B2D 082F |
| 000053 D331 C934 |
| 000055 EC37 3B3B | .dw FOSC/1397, FOSC/1319, FOSC/1245, FOSC/1175, FOSC/1109, FOSC/1047
| 000057 C03E 7D42 |
| 000059 7246 9E4A |
|                  | ;2oct
| 00005B 124F D353 | .dw FOSC/988 , FOSC/932 , FOSC/880 , FOSC/831 , FOSC/784 , FOSC/740
| 00005D C758 035E |
| 00005F A663 9369 |
| 000061 C46F 8D76 | .dw FOSC/699 , FOSC/659 , FOSC/622 , FOSC/587 , FOSC/554 , FOSC/523
| 000063 9A7D 1785 |
| 000065 058D 6095 |
|                  | ;1oct
| 000067 259E A6A7 | .dw FOSC/494 , FOSC/466 , FOSC/440 , FOSC/415 , FOSC/392 , FOSC/370
| 000069 8EB1 40BC |
| 00006B 4CC7 26D3 |
| 00006D DADF BEEC | .dw FOSC/349 , FOSC/330 , FOSC/311 , FOSC/8/294 , FOSC/8/277 , FOSC/8/262
| 00006F 34FB 3721 |
| 000071 4123 4525 |
|                  | ;small oct
| 000073 8927 E929 | .dw FOSC/8/247 , FOSC/8/233 , FOSC/8/220 , FOSC/8/207 , FOSC/8/196 , FOSC/8/185
| 000075 632C 2D2F |
| 000077 D331 C934 |
| 000079 CD37 2F3B | .dw FOSC/8/175 , FOSC/8/165 , FOSC/8/156 , FOSC/8/148 , FOSC/8/139 , FOSC/8/131
| 00007B 993E FB41 |
| 00007D 4146 8B4A |
|                  | ;contr oct
| 00007F C14E 2F54 | .dw FOSC/8/124 , FOSC/8/116 , FOSC/8/110 , FOSC/8/104 , FOSC/8/98 , FOSC/8/93
| 000081 C758 E65D |
| 000083 A663 0169 |
| 000085 3F70 A875 | .dw FOSC/8/87 , FOSC/8/83 , FOSC/8/78 , FOSC/8/74 , FOSC/8/70 , FOSC/8/65
| 000087 337D F783 |
| 000089 828B 3D96 |
|                  | 
|                  | 
|                  | .macro play_note_n;     @0 - note number
|                  |         ldi R16, @0
|                  |         rcall PLAY_NOTE
|                  | .endm
|                  | 
|                  | .equ TRANSPOND = 18
|                  | PLAY_NOTE:
| 00008B           >         addi R16,TRANSPOND
| 00008D 3202      |         cpi R16, DIV1_NOTE
| 00008E F414      |         brge _DIV1              ;if note >= 34 - set prescaler to F/8
| 00008F E039      |         ldi R19,0b1001          ;if note < 34 - set prescaler to F/1
| 000090 C001      |         rjmp _SET_COMPARER
|                  | _DIV1:
| 000091 E03A      |         ldi R19,0b1010
|                  | 
|                  | _SET_COMPARER:
| 000092 94F8      |         cli
| 000093 3102      |         cpi R16,TRANSPOND
| 000094 F0E9      |         breq _END
| 000095 950A      |         dec R16
| 000096 0F00      |         lsl R16 ;R16 * 2
| 000097           >         ldiw Z,NOTE_DIVS*2
| 000099           >         adrw Z,R16
| 00009C 9125      |         lpm R18,Z+
| 00009D 9114      |         lpm R17,Z
|                  | 
| 00009E 9330 0081 |         sts TCCR1B, R19 ;set prescaler
| 0000A0           >         stsiw TCNT1,0   ;reset counter
|                  | 
| 0000A6 9310 0089 |         sts OCR1AH, R17 ;set period comparer
| 0000A8 9320 0088 |         sts OCR1AL, R18
| 0000AA 9488      |         clc
| 0000AB 9517      |         ror R17         ;set half-period comparer (k/2)
| 0000AC 9527      |         ror R18
|                  |         ;ror R17                ;set half-period comparer (k/2)
|                  |         ;ror R18
| 0000AD 9310 008B |         sts OCR1BH, R17
| 0000AF 9320 008A |         sts OCR1BL, R18
|                  |         ;stsi OCR1BH, 0
|                  |         ;stsi OCR1BL, 10
| 0000B1 9478      |                 sei
| 0000B2 9508      | _END:   ret
|                  | 
|                  |         
|                  | 
|                  | 
|                  | MAIN:
| 0000B3 D002      |         rcall PLAY_MUSIC
| 0000B4 CFFE      |         rjmp MAIN
|                  |         ;ldi R16,DO0
|                  |                 ;rcall PLAY_NOTE
| 0000B5 CFFF      |         rjmp pc
|                  | 
|                  | PLAY_MUSIC:
|                  |         ;ldiw Z,Gamma*2
|                  |         ;ldiw Z,Sherlock_Livanov*2
| 0000B6           >         ldiw Z,USSR*2
|                  |         ;ldiw Z,GravityFalls*2
|                  |         ;ldiw Z,Sherlock*2
|                  |         ;ldiw Z, Polka*2
|                  |         ;ldiw Z, GOT*2
| 0000B8 9105      | _NEXT:  lpm R16,Z+
| 0000B9 9115      |         lpm R17,Z+
| 0000BA 3F0F      |         cpi R16,255
| 0000BB F071      |         breq _END
| 0000BC           >         pushw Z
| 0000BE 931F      |         push R17
| 0000BF DFCB      |         rcall PLAY_NOTE
| 0000C0 910F      |         pop R16
| 0000C1 DF4B      |         rcall DELAY3
| 0000C2 D00D      |         rcall AUDIO_0
| 0000C3 94F8      |         cli
| 0000C4 E002      |         ldi R16,T0
| 0000C5 DF47      |         rcall DELAY3
| 0000C6 9478      |         sei
| 0000C7           >         popw Z
| 0000C9 CFEE      |         rjmp _NEXT
| 0000CA 9508      | _END:   ret
|                  | 
|                  | 
|                  | AUDIO_1:
| 0000CB 9A2B      |         sbi PORTB,3
| 0000CC 9A2C      |         sbi PORTB,4
| 0000CD 9A5D      |         sbi PORTD,5
| 0000CE 985E      |         cbi PORTD,6
| 0000CF 9508      |         ret
|                  | 
|                  | AUDIO_0:
| 0000D0 982B      |         cbi PORTB,3
| 0000D1 982D      |         cbi PORTB,5
| 0000D2 985D      |         cbi PORTD,5
| 0000D3 9A5E      |         sbi PORTD,6
| 0000D4 9508      |         ret
|                  | 
|                  | 
|                  | .equ T05 = T0*2
|                  | .equ T1 = T0*5
|                  | .equ T2 = T1*2
|                  | .equ T2_5 = T0*12
|                  | .equ T3 = T1*3
|                  | .equ T4 = T2*2
|                  | .equ T4_5 = T1*9/2
|                  | .equ T5 = T1*5
|                  | .equ T6 = T2*3
|                  | .equ T7 = T1*7
|                  | .equ T8 = T4*2
|                  | .equ T10 = T1*10
|                  | .equ T11 = T1*11
|                  | .equ T12 = T1*12
|                  | 
|                  | 
|                  | Gamma:
| 0000D5 3028 2E28 | .db Do0,T4, Re0,T4, Mi0,T4, Fa0,T4, Sol0,T4, La0,T4, Si0,T4
| 0000D7 2C28 2B28 |
| 0000D9 2928 2728 |
| 0000DB 2528      |
| 0000DC 2428 2228 | .db Do1,T4, Re1,T4, Mi1,T4, Fa1,T4, Sol1,T4, La1,T4, Si1,T4
| 0000DE 2028 1F28 |
| 0000E0 1D28 1B28 |
| 0000E2 1928      |
| 0000E3 1828 1628 | .db Do2,T4, Re2,T4, Mi2,T4, Fa2,T4, Sol2,T4, La2,T4, Si2,T4, Do3,T4, 255, 0
| 0000E5 1428 1328 |
| 0000E7 1128 0F28 |
| 0000E9 0D28 0C28 |
| 0000EB FF00      |
|                  | 
|                  | USSR:
| 0000EC 1814 1328 | .db Do2,T2, Fa2,T4, Do2,T3, Re2,T1, Mi2,T4, La1,T2
| 0000EE 181E 160A |
| 0000F0 1428 1B14 |
| 0000F2 1B14 1628 | .db La1,T2, Re2,T4, Do2,T3, LaD1,T1, Do2,T4, Fa1,T2
| 0000F4 181E 1A0A |
| 0000F6 1828 1F14 |
| 0000F8 1F14 1D28 | .db Fa1,T2, Sol1,T4, Sol1,T2, La1,T2, LaD1,T4
| 0000FA 1D14 1B14 |
| 0000FC 1A28      |
| 0000FD 1A14 1814 | .db LaD1,T2, Do2,T2, Re2,T4, Mi2,T3, Fa2,T1, Sol2,T6;, 0,T2
| 0000FF 1628 141E |
| 000101 130A 113C |
| 000103 1814 0F28 | .db Do2,T2, La2,T4, Sol2,T3, Fa2,T1, Sol2,T4, Re2,T2
| 000105 111E 130A |
| 000107 1128 1614 |
| 000109 1814 1328 | .db Do2,T2, Fa2,T4, Mi2,T3, Re2,T1, Mi2,T4, La1,T2
| 00010B 141E 160A |
| 00010D 1428 1B14 |
| 00010F 1B14 1628 | .db La1,T2, Re2,T4, Do2,T3, LaD1,T1, Do2,T4, Fa1,T2
| 000111 181E 1A0A |
| 000113 1828 1F14 |
| 000115 1F14 1328 | .db Fa1,T2, Fa2,T4, Mi2,T3, Re2,T1, Do2,T6, 0, T2
| 000117 141E 160A |
| 000119 183C 0014 |
| 00011B 0F50 1114 | .db La2,T8, Sol2,T2, Fa2,T2, Mi2,T2, Fa2,T2, Sol2,T6, Do2,T2,Do2,T6,0,T2
| 00011D 1314 1414 |
| 00011F 1314 113C |
| 000121 1814 183C |
| 000123 0014      |
| 000124 1350 1414 | .db Fa2,T8, Mi2,T2, Re2,T2, Do2,T2, Re2,T2, Mi2,T6, La1,T2,La1,T6,0,T2
| 000126 1614 1814 |
| 000128 1614 143C |
| 00012A 1B14 1B3C |
| 00012C 0014      |
| 00012D 1628 1A1E | .db Re2,T4, Lad1,T3, Do2,T1, Re2,T4, Lad1,T3, Do2,T1, Re2,T4, Lad1,T2, Re2,T2, Sol2,T8, 0, T1
| 00012F 180A 1628 |
| 000131 1A1E 180A |
| 000133 1628 1A14 |
| 000135 1614 1150 |
| 000137 000A      |
| 000138 0E50 0F14 | .db Lad2,T8, La2,T2, Sol2,T2, Fa2,T2, Sol2,T2, La2,T6, Fa2,T2,Fa2,T6,0,T2
| 00013A 1114 1314 |
| 00013C 1114 0F3C |
| 00013E 1314 133C |
| 000140 0014      |
| 000141 1150 1314 | .db Sol2,T8, Fa2,T2, Mi2,T2, Re2,T2, Mi2,T2, Fa2,T6, Re2,T2,Re2,T6,0,T2
| 000143 1414 1614 |
| 000145 1414 133C |
| 000147 1614 163C |
| 000149 0014      |
| 00014A 1328 141E | .db Fa2,T4, Mi2,T3, Re2,T1, Do2,T4, Fa1,T2, Fa1,T2, Fa2,T4, Mi2,T2, Re2,T2, Do2,T8, 0, 2
| 00014C 160A 1828 |
| 00014E 1F14 1F14 |
| 000150 1328 1414 |
| 000152 1614 1850 |
| 000154 0002      |
| 000155 FF00      | .db 255, 0
|                  | 
|                  | 
|                  | 
|                  | GravityFalls:
| 000156 163C 1414 | .db Re2,T6, Mi2,T2, Fa2,T6, 0,T2, La2,T3, Sol2,T3, La2,T2, Do2,T6, 0 ,T2
| 000158 133C 0014 |
| 00015A 0F1E 111E |
| 00015C 0F14 183C |
| 00015E 0014      |
| 00015F 163C 1414 | .db Re2,T6, Mi2,T2, Fa2,T4, Mi2,T4, Sol2,T4, La2,T4, Sol2,T4, Fa2,T4, 0 ,T2
| 000161 1328 1428 |
| 000163 1128 0F28 |
| 000165 1128 1328 |
| 000167 0014      |
| 000168 1314 1314 | .db Fa2,T2, Fa2,T2, Fa2,T2, La2,T2, La2,T2, Sol2,T2, Fa2,T3, 0, T1
| 00016A 1314 0F14 |
| 00016C 0F14 1114 |
| 00016E 131E 000A |
| 000170 0F14 0F14 | .db La2,T2, La2,T2, La2,T2, Sol2,T2, La2,T2, Sol2,T2, Fa2,T3, 0, T1
| 000172 0F14 1114 |
| 000174 0F14 1114 |
| 000176 131E 000A |
| 000178 1314 1314 | .db Fa2,T2, Fa2,T2, Fa2,T2, La2,T2, La2,T2, Sol2,T2, Fa2,T3, 0, T1
| 00017A 1314 0F14 |
| 00017C 0F14 1114 |
| 00017E 131E 000A |
| 000180 0F14 0F14 | .db La2,T2, La2,T2, La2,T2, 0, T2, DoD3,T2, DoD3,T2, DoD3,T2, 0, T2
| 000182 0F14 0014 |
| 000184 0B14 0B14 |
| 000186 0B14 0014 |
| 000188 1314 1314 | .db Fa2,T2, Fa2,T2, Fa2,T2, La2,T2, La2,T2, Sol2,T2, Fa2,T3, 0, T1
| 00018A 1314 0F14 |
| 00018C 0F14 1114 |
| 00018E 131E 000A |
| 000190 0E14 0E14 | .db LaD2,T2, LaD2,T2, LaD2,T2, Sol2,T4_5, Do3,T4_5, La2,T4_5, DoD3,T4_5, Re3,T8, 0, T6
| 000192 0E14 112D |
| 000194 0C2D 0F2D |
| 000196 0B2D 0A50 |
| 000198 003C      |
| 000199 FF00      | .db 255, 0
|                  | 
|                  | 
|                  | Sherlock:
| 00019A 2514 1E28 | .db Si0,T2, Fad1,T4, Fad1,T2, Fa1,T1, Fad1,T1, Sol1,T4, Fad1,T2, Mi1,T2, Si1,T11,0,T4
| 00019C 1E14 1F0A |
| 00019E 1E0A 1D28 |
| 0001A0 1E14 2014 |
| 0001A2 196E 0028 |
| 0001A4 2014 1928 | .db Mi1,T2, Si1,T4, Si1,T2, Lad1,T1, Si1,T1, Dod2,T4, Si1,T2, Re2,T12, 0,T5
| 0001A6 1914 1A0A |
| 0001A8 190A 1728 |
| 0001AA 1914 1678 |
| 0001AC 0032      |
| 0001AD 1214 1928 | .db Fad2,T2, Si1,T4, Si1,T2, Dod2,T2, Re2,T2, Dod2,T2, Si1,T2, Mi2,T2, Si1,T10, 0,T2
| 0001AF 1914 1714 |
| 0001B1 1614 1714 |
| 0001B3 1914 1414 |
| 0001B5 1964 0014 |
| 0001B7 190A 170A | .db Si1,T1, Dod2,T1, Re2,T2, Re2,T1, Mi2,T1, Dod2,T2, Dod2,T1, Re2,T1, Si1,T2, Si1,T1, Dod2,T1, Sol1,T2, Fad1,T2,Si1,T8,0,T6
| 0001B9 1614 160A |
| 0001BB 140A 1714 |
| 0001BD 170A 160A |
| 0001BF 1914 190A |
| 0001C1 170A 1D14 |
| 0001C3 1E14 1950 |
| 0001C5 003C      |
| 0001C6 FF00      | .db 255, 0
|                  | 
|                  | Polka:
| 0001C7 1D14 1814 | .db Sol1,T2, Do2,T2, Do2,T3, Re2,T1, Red2,T2, Do2,T2, Do2,T3
| 0001C9 181E 160A |
| 0001CB 1514 1814 |
| 0001CD 181E      |
| 0001CE 150A 1614 | .db Red2,T1, Re2,T2, Lad1,T2, Lad1,T2, Re2,T2, Red2,T2, Do2,T2, Do2,T4
| 0001D0 1A14 1A14 |
| 0001D2 1614 1514 |
| 0001D4 1814 1828 |
| 0001D6 1D14 1814 | .db Sol1,T2, Do2,T2, Do2,T3, Re2,T1, Red2,T2, Do2,T2, Do2,T3
| 0001D8 181E 160A |
| 0001DA 1514 1814 |
| 0001DC 181E      |
| 0001DD 150A 1114 | .db Red2,T1, Sol2,T2, Fa2,T2, Red2,T2, Re2,T2, Red2,T2, Do2,T2, Do2,T4
| 0001DF 1314 1514 |
| 0001E1 1614 1514 |
| 0001E3 1814 1828 |
| 0001E5 1114 1114 | .db Sol2,T2, Sol2,T2, Fa2,T3, Red2,T1, Re2,T2, Lad1,T2, Lad1,T2
| 0001E7 131E 150A |
| 0001E9 1614 1A14 |
| 0001EB 1A14      |
| 0001EC 1614 1314 | .db Re2,T2, Fa2,T2, Fa2,T2, Red2,T3, Re2,T1, Red2,T2, Do2,T2, Do2,T2, Red2,T2
| 0001EE 1314 151E |
| 0001F0 160A 1514 |
| 0001F2 1814 1814 |
| 0001F4 1514      |
| 0001F5 1114 1114 | .db Sol2,T2, Sol2,T2, Fa2,T3, Red2,T1, Re2,T2, Lad1,T2, Lad1,T2
| 0001F7 131E 150A |
| 0001F9 1614 1A14 |
| 0001FB 1A14      |
| 0001FC 1614 1314 | .db Re2,T2, Fa2,T2, Fa2,T2, Red2,T3, Re2,T1, Red2,T2, Do2,T2, Do2,T4
| 0001FE 1314 151E |
| 000200 160A 1514 |
| 000202 1814 1828 |
| 000204 0028 FF00 | .db 0,T4, 255, 0
|                  | 
|                  | 
|                  | Sherlock_Livanov:
| 000206 1B32 0014 | .db La1,T5, 0,T2, La1,T2, Dod2,T4, Mi2,T4, La2,T1, Sold2,T1, Fad2,T1, Sold2,T1, La2,T6, 0,T05
| 000208 1B14 1728 |
| 00020A 1428 0F0A |
| 00020C 100A 120A |
| 00020E 100A 0F3C |
| 000210 0004      |
| 000211 1032 1214 | .db Sold2,T5, Fad2,T2, Mi2,T1, Re2,T1, Dod2,T1, Re2,T1, Mi2,T2
| 000213 140A 160A |
| 000215 170A 160A |
| 000217 1414      |
| 000218 140A 140A | .db Mi2,T1, Mi2,T1, Mi2,T1, 0,T1, Re2,T4, 0,T05, Dod2,T2_5, Dod2,T5
| 00021A 140A 000A |
| 00021C 1628 0004 |
| 00021E 1718 1732 |
| 000220 2028 200A | .db Mi1,T4, Mi1,T1, La1,T2_5, Mi1,T2_5, La1,T2_5, Mi1,T2_5
| 000222 1B18 2018 |
| 000224 1B18 2018 |
| 000226 1B32 0014 | .db La1,T5, 0,T2, La1,T2, Dod2,T4, Mi2,T4, Dod3,T1, Si2,T1, La2,T1, Si2,T1, Dod3,T6, 0,T05
| 000228 1B14 1728 |
| 00022A 1428 0B0A |
| 00022C 0D0A 0F0A |
| 00022E 0D0A 0B3C |
| 000230 0004      |
| 000231 0D32 0F14 | .db Si2,T5, La2,T2
| 000233 100A 0F0A | .db Sold2,T1, La2,T1, Si2,T1, La2,T1, Sold2,T2
| 000235 0D0A 0F0A |
| 000237 1014      |
| 000238 0D14 1014 | .db Si2,T2, Sold2,T2, Si2,T2_5, Fad2,T2, Si2,T2_5
| 00023A 0D18 1214 |
| 00023C 0D18      |
| 00023D 100A 0F0A | .db Sold2,T1, La2,T1, Si2,T1, La2,T1, Sold2,T2
| 00023F 0D0A 0F0A |
| 000241 1014      |
| 000242 0D14 1014 | .db Si2,T2, Sold2,T2, Si2,T2_5, Fad2,T2, Si2,T2
| 000244 0D18 1214 |
| 000246 0D14      |
| 000247 1014 100A | .db Sold2,T2, Sold2,T1, Fad2,T1, Mi2,T2, Mi2,T1, Re2,T1, Dod2,T2, Mi2,T2, La2,T6, 0,T1
| 000249 120A 1414 |
| 00024B 140A 160A |
| 00024D 1714 1414 |
| 00024F 0F3C 000A |
| 000251 0D14 1028 | .db Si2,T2, Sold2,T4, La2,T1, La2,T6, 0,T6
| 000253 0F0A 0F3C |
| 000255 003C      |
| 000256 FF00      | .db 255,0
|                  | 
|                  | GoT:
| 000257 181E 1F14 | .db Do2,T3, Fa1,T2, 0,T05,    La1,T1, Lad1,T1, Do2,T3, Fa1,T2, 0,T05,    La1,T1, Lad1,T1, Do2,T3, Fa1,T2, 0,T05;,    La1,T1, Lad1,T1, Do2,T3, Fa1,T2, 0,T05
| 000259 0004 1B0A |
| 00025B 1A0A 181E |
| 00025D 1F14 0004 |
| 00025F 1B0A 1A0A |
| 000261 181E 1F14 |
| 000263 0004      |
|                  | 
| 000264 1B1E 1850 | .db La1,T3, Do2,T8, Fa1,T4, 0,T1, La1,T1, Lad1,T1, Do2,T8, Fa1,T4, 0,T1, Sold1,T1, Lad1,T1, Sol1,T3
| 000266 1F28 000A |
| 000268 1B0A 1A0A |
| 00026A 1850 1F28 |
| 00026C 000A 1C0A |
| 00026E 1A0A 1D1E |
|                  | 
+------------------+-----------------------------------------------------------+

Errors      : 0
Warnings    : 1
Code        : 624
Rom         : 0
Data        : 0
Unused Code : 10
Unused Rom  : 0
