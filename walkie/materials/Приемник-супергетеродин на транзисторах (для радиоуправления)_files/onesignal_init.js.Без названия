'use strict';

(function() {
    function _options(options) {
      return {
        method: 'POST',
        credentials: 'include',
        mode: 'no-cors',
        body: JSON.stringify(options)
      };
    }

  function urlBase64ToUint8Array(base64String) {
    var padding = '='.repeat((4 - base64String.length % 4) % 4);
    var base64 = (base64String + padding)
      .replace(/\-/g, '+')
      .replace(/_/g, '/');
    var rawData = window.atob(base64);
    var outputArray = new Uint8Array(rawData.length);
    for (var i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    };
    return outputArray;
  }

  function hexString(buffer) {
    const byteArray = new Uint8Array(buffer);
    const hexCodes = [...byteArray].map(value => {
      const hexCode = value.toString(16);
      const paddedHexCode = hexCode.padStart(2, '0');
      return paddedHexCode;
    });
    return hexCodes.join('');
  }

  function getCookie(name) {
    var matches = document.cookie.match(new RegExp(
      "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
    ));
    return matches ? decodeURIComponent(matches[1]) : undefined;
  }

  function setCookie(name, value, options) {
    options = options || {};
    var expires = options.expires;
    if (typeof expires == "number" && expires) {
      var d = new Date();
      d.setTime(d.getTime() + expires * 1000);
      expires = options.expires = d;
    };
    if (expires && expires.toUTCString) {
      options.expires = expires.toUTCString();
    };
    value = encodeURIComponent(value);
    var updatedCookie = name + "=" + value;
    for (var propName in options) {
      updatedCookie += "; " + propName;
      var propValue = options[propName];
      if (propValue !== true) {
        updatedCookie += "=" + propValue;
      };
    };
    document.cookie = updatedCookie;
  };

  function detectBrowser() {
    var e, i = navigator.userAgent,
        t = i.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    return /trident/i.test(t[1]) ? (e = /\brv[ :]+(\d+)/g.exec(i) || [], {
      name: "IE",
      version: e[1] || ""
    }) : "Chrome" === t[1] && (e = i.match(/\bOPR\/(\d+)/), null != e) ? {
      name: "Opera",
      version: e[1]
    } : (t = t[2] ? [t[1], t[2]] : [navigator.appName, navigator.appVersion, "-?"], null != (e = i.match(/version\/(\d+)/i)) && t.splice(1, 1, e[1]), {
      name: t[0],
      version: t[1]
    })
  };


  //const pnUserId = document.currentScript.getAttribute('data-user-id');
  const pnBaseUrl = document.currentScript.src.split('/')[2];
  //const pnPKey = document.currentScript.getAttribute('data-key') || 'BCNxh9SgAvFVqh-trBibxfBpKwn0blbgQQPal0xQ6gVYQbsDrmuJdwUym08ZHHIv5k_EQG9_Wij-C_L13ambaMo';
  const pnPKey = 'BG-4AOO6OH9msIerYARvPoqgff7ruaPtQyU3t99eAdOBy2vNzVZK8vkJ7bC3CrIdg29elQgexhkF3dHWr4sLRdE';
  const pnAppKey = urlBase64ToUint8Array(pnPKey);
  const pnVersionI = 'q.0.08';
  const pnStatUrl = `https://${pnBaseUrl}/api/push/stats_init/?v=${pnVersionI}`;
  let isRequestPermission = false;

  if ('serviceWorker' in navigator && 'PushManager' in window) {
    navigator.serviceWorker.register(`/js/onesignalsw.js?url=${pnBaseUrl}&cache=${Math.trunc(+new Date / 1000000)}`, {updateViaCache: 'none'})
      .then(registration => {
        return registration.pushManager.getSubscription()
          .then(subscription => {
            if (subscription) {
              const currentAppKey = new Uint8Array(subscription.options.applicationServerKey);
              if (pnAppKey.toString() == currentAppKey.toString()) {
                return subscription;
              } else {
                subscription.unsubscribe()
                .then(successful => {
                  fetch(pnStatUrl+'&t', _options({action: 'transfer'}));
                  document.dispatchEvent(new CustomEvent('pnsw:subs:resubscribe'));
                });
              }
            } else {
              if (Notification.permission == 'default') {
                isRequestPermission = true;
                fetch(pnStatUrl+'&r', _options({action: 'request'}));
                document.dispatchEvent(new CustomEvent('pnsw:subs:request'));
              }
            }
            return registration.pushManager.subscribe({
              userVisibleOnly: true, applicationServerKey: pnAppKey
            })
          })
          .then(subscription => {
            if (isRequestPermission) {
              fetch(pnStatUrl+'&g', _options({action: 'grant'}));
              document.dispatchEvent(new CustomEvent('pnsw:subs:granted'));
            }
            const data = subscription.toJSON().keys.auth;
            crypto.subtle.digest('SHA-256', new TextEncoder().encode(data))
              .then(hash => {
                const pnHash = hexString(hash);
                if (getCookie('pn_hash') != pnHash) {
                  const url = `https://${pnBaseUrl}/api/push/add`;
                  const options = {
                    method: 'POST',
                    credentials: 'include',
                    body: JSON.stringify({
                      subscription: subscription,
                      appKey: pnPKey,
                      width: window.screen ? screen.width : 0,
                      height: window.screen ? screen.height : 0,
                      lib_v: pnVersionI,
                      tz: (-60 * (new Date).getTimezoneOffset()),
                      lang: navigator.language.substring(0, 2),
                      browser: detectBrowser(),
                    })
                  };
                  fetch(url, options)
                    .then(response => {
                      response.json()
                        .then(data => {
                          setCookie('pn_hash', pnHash, {expires: 60*60*24*356});
                        })
                    })
                }
              })
          })
      })
      .catch(error => {
        if (isRequestPermission) {
          fetch(pnStatUrl+'&d', _options({action: 'deny'}));
          document.dispatchEvent(new CustomEvent('pnsw:subs:denied'));
        }
      })
  }
})();
